import base64

# ðŸ‘‡ Pega aquÃ­ el token BASE64 que ya funciona en Azure Function
token_base64 = """"""

with open("token_cache.json", "w", encoding="utf-8") as f:
    f.write(base64.b64decode(token_base64).decode("utf-8"))

print("âœ… token_cache.json creado correctamente en esta carpeta.")
